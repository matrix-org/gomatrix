// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package gomatrix

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson559270aeDecodeGithubComMatrixOrgGomatrix(in *jlexer.Lexer, out *RespVersions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "versions":
			if in.IsNull() {
				in.Skip()
				out.Versions = nil
			} else {
				in.Delim('[')
				if out.Versions == nil {
					if !in.IsDelim(']') {
						out.Versions = make([]string, 0, 4)
					} else {
						out.Versions = []string{}
					}
				} else {
					out.Versions = (out.Versions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Versions = append(out.Versions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix(out *jwriter.Writer, in RespVersions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"versions\":"
		out.RawString(prefix[1:])
		if in.Versions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Versions {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespVersions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespVersions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespVersions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespVersions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix1(in *jlexer.Lexer, out *RespUserStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "presence":
			out.Presence = string(in.String())
		case "status_msg":
			out.StatusMsg = string(in.String())
		case "last_active_ago":
			out.LastActiveAgo = int(in.Int())
		case "currently_active":
			out.CurrentlyActive = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix1(out *jwriter.Writer, in RespUserStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"presence\":"
		out.RawString(prefix[1:])
		out.String(string(in.Presence))
	}
	{
		const prefix string = ",\"status_msg\":"
		out.RawString(prefix)
		out.String(string(in.StatusMsg))
	}
	{
		const prefix string = ",\"last_active_ago\":"
		out.RawString(prefix)
		out.Int(int(in.LastActiveAgo))
	}
	{
		const prefix string = ",\"currently_active\":"
		out.RawString(prefix)
		out.Bool(bool(in.CurrentlyActive))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespUserStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespUserStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespUserStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespUserStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix1(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix2(in *jlexer.Lexer, out *RespUserInteractive) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "flows":
			if in.IsNull() {
				in.Skip()
				out.Flows = nil
			} else {
				in.Delim('[')
				if out.Flows == nil {
					if !in.IsDelim(']') {
						out.Flows = make([]struct {
							Stages []string `json:"stages"`
						}, 0, 2)
					} else {
						out.Flows = []struct {
							Stages []string `json:"stages"`
						}{}
					}
				} else {
					out.Flows = (out.Flows)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						Stages []string `json:"stages"`
					}
					easyjson559270aeDecode(in, &v4)
					out.Flows = append(out.Flows, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "params":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Params = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					(out.Params)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "session":
			out.Session = string(in.String())
		case "completed":
			if in.IsNull() {
				in.Skip()
				out.Completed = nil
			} else {
				in.Delim('[')
				if out.Completed == nil {
					if !in.IsDelim(']') {
						out.Completed = make([]string, 0, 4)
					} else {
						out.Completed = []string{}
					}
				} else {
					out.Completed = (out.Completed)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Completed = append(out.Completed, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errcode":
			out.ErrCode = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix2(out *jwriter.Writer, in RespUserInteractive) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"flows\":"
		out.RawString(prefix[1:])
		if in.Flows == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Flows {
				if v7 > 0 {
					out.RawByte(',')
				}
				easyjson559270aeEncode(out, v8)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		if in.Params == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.Params {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				if m, ok := v9Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v9Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v9Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"session\":"
		out.RawString(prefix)
		out.String(string(in.Session))
	}
	{
		const prefix string = ",\"completed\":"
		out.RawString(prefix)
		if in.Completed == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Completed {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errcode\":"
		out.RawString(prefix)
		out.String(string(in.ErrCode))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespUserInteractive) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespUserInteractive) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespUserInteractive) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespUserInteractive) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix2(l, v)
}
func easyjson559270aeDecode(in *jlexer.Lexer, out *struct {
	Stages []string `json:"stages"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stages":
			if in.IsNull() {
				in.Skip()
				out.Stages = nil
			} else {
				in.Delim('[')
				if out.Stages == nil {
					if !in.IsDelim(']') {
						out.Stages = make([]string, 0, 4)
					} else {
						out.Stages = []string{}
					}
				} else {
					out.Stages = (out.Stages)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Stages = append(out.Stages, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode(out *jwriter.Writer, in struct {
	Stages []string `json:"stages"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stages\":"
		out.RawString(prefix[1:])
		if in.Stages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Stages {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix3(in *jlexer.Lexer, out *RespUserDisplayName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "displayname":
			out.DisplayName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix3(out *jwriter.Writer, in RespUserDisplayName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"displayname\":"
		out.RawString(prefix[1:])
		out.String(string(in.DisplayName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespUserDisplayName) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespUserDisplayName) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespUserDisplayName) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespUserDisplayName) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix3(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix4(in *jlexer.Lexer, out *RespUnbanUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix4(out *jwriter.Writer, in RespUnbanUser) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespUnbanUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespUnbanUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespUnbanUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespUnbanUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix4(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix5(in *jlexer.Lexer, out *RespTyping) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix5(out *jwriter.Writer, in RespTyping) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespTyping) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespTyping) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespTyping) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespTyping) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix5(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix6(in *jlexer.Lexer, out *RespTurnServer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "ttl":
			out.TTL = int(in.Int())
		case "uris":
			if in.IsNull() {
				in.Skip()
				out.URIs = nil
			} else {
				in.Delim('[')
				if out.URIs == nil {
					if !in.IsDelim(']') {
						out.URIs = make([]string, 0, 4)
					} else {
						out.URIs = []string{}
					}
				} else {
					out.URIs = (out.URIs)[:0]
				}
				for !in.IsDelim(']') {
					var v15 string
					v15 = string(in.String())
					out.URIs = append(out.URIs, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix6(out *jwriter.Writer, in RespTurnServer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"ttl\":"
		out.RawString(prefix)
		out.Int(int(in.TTL))
	}
	{
		const prefix string = ",\"uris\":"
		out.RawString(prefix)
		if in.URIs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.URIs {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespTurnServer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespTurnServer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespTurnServer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespTurnServer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix6(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix7(in *jlexer.Lexer, out *RespSync) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "next_batch":
			out.NextBatch = string(in.String())
		case "account_data":
			easyjson559270aeDecode1(in, &out.AccountData)
		case "presence":
			easyjson559270aeDecode1(in, &out.Presence)
		case "rooms":
			easyjson559270aeDecode2(in, &out.Rooms)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix7(out *jwriter.Writer, in RespSync) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"next_batch\":"
		out.RawString(prefix[1:])
		out.String(string(in.NextBatch))
	}
	{
		const prefix string = ",\"account_data\":"
		out.RawString(prefix)
		easyjson559270aeEncode1(out, in.AccountData)
	}
	{
		const prefix string = ",\"presence\":"
		out.RawString(prefix)
		easyjson559270aeEncode1(out, in.Presence)
	}
	{
		const prefix string = ",\"rooms\":"
		out.RawString(prefix)
		easyjson559270aeEncode2(out, in.Rooms)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespSync) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespSync) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespSync) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespSync) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix7(l, v)
}
func easyjson559270aeDecode2(in *jlexer.Lexer, out *struct {
	Leave map[string]struct {
		State struct {
			Events []Event `json:"events"`
		} `json:"state"`
		Timeline struct {
			Events    []Event `json:"events"`
			Limited   bool    `json:"limited"`
			PrevBatch string  `json:"prev_batch"`
		} `json:"timeline"`
	} `json:"leave"`
	Join map[string]struct {
		State struct {
			Events []Event `json:"events"`
		} `json:"state"`
		Timeline struct {
			Events    []Event `json:"events"`
			Limited   bool    `json:"limited"`
			PrevBatch string  `json:"prev_batch"`
		} `json:"timeline"`
		Ephemeral struct {
			Events []Event `json:"events"`
		} `json:"ephemeral"`
	} `json:"join"`
	Invite map[string]struct {
		State struct{ Events []Event } `json:"invite_state"`
	} `json:"invite"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "leave":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Leave = make(map[string]struct {
					State struct {
						Events []Event `json:"events"`
					} `json:"state"`
					Timeline struct {
						Events    []Event `json:"events"`
						Limited   bool    `json:"limited"`
						PrevBatch string  `json:"prev_batch"`
					} `json:"timeline"`
				})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v18 struct {
						State struct {
							Events []Event `json:"events"`
						} `json:"state"`
						Timeline struct {
							Events    []Event `json:"events"`
							Limited   bool    `json:"limited"`
							PrevBatch string  `json:"prev_batch"`
						} `json:"timeline"`
					}
					easyjson559270aeDecode3(in, &v18)
					(out.Leave)[key] = v18
					in.WantComma()
				}
				in.Delim('}')
			}
		case "join":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Join = make(map[string]struct {
					State struct {
						Events []Event `json:"events"`
					} `json:"state"`
					Timeline struct {
						Events    []Event `json:"events"`
						Limited   bool    `json:"limited"`
						PrevBatch string  `json:"prev_batch"`
					} `json:"timeline"`
					Ephemeral struct {
						Events []Event `json:"events"`
					} `json:"ephemeral"`
				})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 struct {
						State struct {
							Events []Event `json:"events"`
						} `json:"state"`
						Timeline struct {
							Events    []Event `json:"events"`
							Limited   bool    `json:"limited"`
							PrevBatch string  `json:"prev_batch"`
						} `json:"timeline"`
						Ephemeral struct {
							Events []Event `json:"events"`
						} `json:"ephemeral"`
					}
					easyjson559270aeDecode4(in, &v19)
					(out.Join)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		case "invite":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Invite = make(map[string]struct {
					State struct{ Events []Event } `json:"invite_state"`
				})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v20 struct {
						State struct{ Events []Event } `json:"invite_state"`
					}
					easyjson559270aeDecode5(in, &v20)
					(out.Invite)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode2(out *jwriter.Writer, in struct {
	Leave map[string]struct {
		State struct {
			Events []Event `json:"events"`
		} `json:"state"`
		Timeline struct {
			Events    []Event `json:"events"`
			Limited   bool    `json:"limited"`
			PrevBatch string  `json:"prev_batch"`
		} `json:"timeline"`
	} `json:"leave"`
	Join map[string]struct {
		State struct {
			Events []Event `json:"events"`
		} `json:"state"`
		Timeline struct {
			Events    []Event `json:"events"`
			Limited   bool    `json:"limited"`
			PrevBatch string  `json:"prev_batch"`
		} `json:"timeline"`
		Ephemeral struct {
			Events []Event `json:"events"`
		} `json:"ephemeral"`
	} `json:"join"`
	Invite map[string]struct {
		State struct{ Events []Event } `json:"invite_state"`
	} `json:"invite"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"leave\":"
		out.RawString(prefix[1:])
		if in.Leave == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v21First := true
			for v21Name, v21Value := range in.Leave {
				if v21First {
					v21First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v21Name))
				out.RawByte(':')
				easyjson559270aeEncode3(out, v21Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"join\":"
		out.RawString(prefix)
		if in.Join == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Join {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				easyjson559270aeEncode4(out, v22Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"invite\":"
		out.RawString(prefix)
		if in.Invite == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v23First := true
			for v23Name, v23Value := range in.Invite {
				if v23First {
					v23First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v23Name))
				out.RawByte(':')
				easyjson559270aeEncode5(out, v23Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson559270aeDecode5(in *jlexer.Lexer, out *struct {
	State struct{ Events []Event } `json:"invite_state"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "invite_state":
			easyjson559270aeDecode6(in, &out.State)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode5(out *jwriter.Writer, in struct {
	State struct{ Events []Event } `json:"invite_state"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"invite_state\":"
		out.RawString(prefix[1:])
		easyjson559270aeEncode6(out, in.State)
	}
	out.RawByte('}')
}
func easyjson559270aeDecode6(in *jlexer.Lexer, out *struct{ Events []Event }) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]Event, 0, 0)
					} else {
						out.Events = []Event{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v24 Event
					easyjson559270aeDecodeGithubComMatrixOrgGomatrix8(in, &v24)
					out.Events = append(out.Events, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode6(out *jwriter.Writer, in struct{ Events []Event }) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Events\":"
		out.RawString(prefix[1:])
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Events {
				if v25 > 0 {
					out.RawByte(',')
				}
				easyjson559270aeEncodeGithubComMatrixOrgGomatrix8(out, v26)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix8(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state_key":
			if in.IsNull() {
				in.Skip()
				out.StateKey = nil
			} else {
				if out.StateKey == nil {
					out.StateKey = new(string)
				}
				*out.StateKey = string(in.String())
			}
		case "sender":
			out.Sender = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "origin_server_ts":
			out.Timestamp = int64(in.Int64())
		case "event_id":
			out.ID = string(in.String())
		case "room_id":
			out.RoomID = string(in.String())
		case "redacts":
			out.Redacts = string(in.String())
		case "unsigned":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Unsigned = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v27 interface{}
					if m, ok := v27.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v27.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v27 = in.Interface()
					}
					(out.Unsigned)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		case "content":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Content = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v28 interface{}
					if m, ok := v28.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v28.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v28 = in.Interface()
					}
					(out.Content)[key] = v28
					in.WantComma()
				}
				in.Delim('}')
			}
		case "prev_content":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PrevContent = make(map[string]interface{})
				} else {
					out.PrevContent = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v29 interface{}
					if m, ok := v29.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v29.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v29 = in.Interface()
					}
					(out.PrevContent)[key] = v29
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix8(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StateKey != nil {
		const prefix string = ",\"state_key\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.StateKey))
	}
	{
		const prefix string = ",\"sender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sender))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"origin_server_ts\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"event_id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"room_id\":"
		out.RawString(prefix)
		out.String(string(in.RoomID))
	}
	if in.Redacts != "" {
		const prefix string = ",\"redacts\":"
		out.RawString(prefix)
		out.String(string(in.Redacts))
	}
	{
		const prefix string = ",\"unsigned\":"
		out.RawString(prefix)
		if in.Unsigned == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v30First := true
			for v30Name, v30Value := range in.Unsigned {
				if v30First {
					v30First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v30Name))
				out.RawByte(':')
				if m, ok := v30Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v30Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v30Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		if in.Content == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v31First := true
			for v31Name, v31Value := range in.Content {
				if v31First {
					v31First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v31Name))
				out.RawByte(':')
				if m, ok := v31Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v31Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v31Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.PrevContent) != 0 {
		const prefix string = ",\"prev_content\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v32First := true
			for v32Name, v32Value := range in.PrevContent {
				if v32First {
					v32First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v32Name))
				out.RawByte(':')
				if m, ok := v32Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v32Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v32Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson559270aeDecode4(in *jlexer.Lexer, out *struct {
	State struct {
		Events []Event `json:"events"`
	} `json:"state"`
	Timeline struct {
		Events    []Event `json:"events"`
		Limited   bool    `json:"limited"`
		PrevBatch string  `json:"prev_batch"`
	} `json:"timeline"`
	Ephemeral struct {
		Events []Event `json:"events"`
	} `json:"ephemeral"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			easyjson559270aeDecode1(in, &out.State)
		case "timeline":
			easyjson559270aeDecode7(in, &out.Timeline)
		case "ephemeral":
			easyjson559270aeDecode1(in, &out.Ephemeral)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode4(out *jwriter.Writer, in struct {
	State struct {
		Events []Event `json:"events"`
	} `json:"state"`
	Timeline struct {
		Events    []Event `json:"events"`
		Limited   bool    `json:"limited"`
		PrevBatch string  `json:"prev_batch"`
	} `json:"timeline"`
	Ephemeral struct {
		Events []Event `json:"events"`
	} `json:"ephemeral"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix[1:])
		easyjson559270aeEncode1(out, in.State)
	}
	{
		const prefix string = ",\"timeline\":"
		out.RawString(prefix)
		easyjson559270aeEncode7(out, in.Timeline)
	}
	{
		const prefix string = ",\"ephemeral\":"
		out.RawString(prefix)
		easyjson559270aeEncode1(out, in.Ephemeral)
	}
	out.RawByte('}')
}
func easyjson559270aeDecode7(in *jlexer.Lexer, out *struct {
	Events    []Event `json:"events"`
	Limited   bool    `json:"limited"`
	PrevBatch string  `json:"prev_batch"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]Event, 0, 0)
					} else {
						out.Events = []Event{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v33 Event
					easyjson559270aeDecodeGithubComMatrixOrgGomatrix8(in, &v33)
					out.Events = append(out.Events, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "limited":
			out.Limited = bool(in.Bool())
		case "prev_batch":
			out.PrevBatch = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode7(out *jwriter.Writer, in struct {
	Events    []Event `json:"events"`
	Limited   bool    `json:"limited"`
	PrevBatch string  `json:"prev_batch"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix[1:])
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Events {
				if v34 > 0 {
					out.RawByte(',')
				}
				easyjson559270aeEncodeGithubComMatrixOrgGomatrix8(out, v35)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"limited\":"
		out.RawString(prefix)
		out.Bool(bool(in.Limited))
	}
	{
		const prefix string = ",\"prev_batch\":"
		out.RawString(prefix)
		out.String(string(in.PrevBatch))
	}
	out.RawByte('}')
}
func easyjson559270aeDecode3(in *jlexer.Lexer, out *struct {
	State struct {
		Events []Event `json:"events"`
	} `json:"state"`
	Timeline struct {
		Events    []Event `json:"events"`
		Limited   bool    `json:"limited"`
		PrevBatch string  `json:"prev_batch"`
	} `json:"timeline"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			easyjson559270aeDecode1(in, &out.State)
		case "timeline":
			easyjson559270aeDecode7(in, &out.Timeline)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode3(out *jwriter.Writer, in struct {
	State struct {
		Events []Event `json:"events"`
	} `json:"state"`
	Timeline struct {
		Events    []Event `json:"events"`
		Limited   bool    `json:"limited"`
		PrevBatch string  `json:"prev_batch"`
	} `json:"timeline"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix[1:])
		easyjson559270aeEncode1(out, in.State)
	}
	{
		const prefix string = ",\"timeline\":"
		out.RawString(prefix)
		easyjson559270aeEncode7(out, in.Timeline)
	}
	out.RawByte('}')
}
func easyjson559270aeDecode1(in *jlexer.Lexer, out *struct {
	Events []Event `json:"events"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]Event, 0, 0)
					} else {
						out.Events = []Event{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v36 Event
					easyjson559270aeDecodeGithubComMatrixOrgGomatrix8(in, &v36)
					out.Events = append(out.Events, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode1(out *jwriter.Writer, in struct {
	Events []Event `json:"events"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix[1:])
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.Events {
				if v37 > 0 {
					out.RawByte(',')
				}
				easyjson559270aeEncodeGithubComMatrixOrgGomatrix8(out, v38)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix9(in *jlexer.Lexer, out *RespSendEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event_id":
			out.EventID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix9(out *jwriter.Writer, in RespSendEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespSendEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespSendEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespSendEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespSendEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix9(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix10(in *jlexer.Lexer, out *RespRegister) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.AccessToken = string(in.String())
		case "device_id":
			out.DeviceID = string(in.String())
		case "home_server":
			out.HomeServer = string(in.String())
		case "refresh_token":
			out.RefreshToken = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix10(out *jwriter.Writer, in RespRegister) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"device_id\":"
		out.RawString(prefix)
		out.String(string(in.DeviceID))
	}
	{
		const prefix string = ",\"home_server\":"
		out.RawString(prefix)
		out.String(string(in.HomeServer))
	}
	{
		const prefix string = ",\"refresh_token\":"
		out.RawString(prefix)
		out.String(string(in.RefreshToken))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespRegister) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespRegister) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespRegister) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespRegister) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix10(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix11(in *jlexer.Lexer, out *RespPublicRooms) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total_room_count_estimate":
			out.TotalRoomCountEstimate = int(in.Int())
		case "prev_batch":
			out.PrevBatch = string(in.String())
		case "next_batch":
			out.NextBatch = string(in.String())
		case "chunk":
			if in.IsNull() {
				in.Skip()
				out.Chunk = nil
			} else {
				in.Delim('[')
				if out.Chunk == nil {
					if !in.IsDelim(']') {
						out.Chunk = make([]PublicRoom, 0, 0)
					} else {
						out.Chunk = []PublicRoom{}
					}
				} else {
					out.Chunk = (out.Chunk)[:0]
				}
				for !in.IsDelim(']') {
					var v39 PublicRoom
					easyjson559270aeDecodeGithubComMatrixOrgGomatrix12(in, &v39)
					out.Chunk = append(out.Chunk, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix11(out *jwriter.Writer, in RespPublicRooms) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total_room_count_estimate\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalRoomCountEstimate))
	}
	{
		const prefix string = ",\"prev_batch\":"
		out.RawString(prefix)
		out.String(string(in.PrevBatch))
	}
	{
		const prefix string = ",\"next_batch\":"
		out.RawString(prefix)
		out.String(string(in.NextBatch))
	}
	{
		const prefix string = ",\"chunk\":"
		out.RawString(prefix)
		if in.Chunk == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.Chunk {
				if v40 > 0 {
					out.RawByte(',')
				}
				easyjson559270aeEncodeGithubComMatrixOrgGomatrix12(out, v41)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespPublicRooms) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespPublicRooms) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespPublicRooms) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespPublicRooms) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix11(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix12(in *jlexer.Lexer, out *PublicRoom) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "canonical_alias":
			out.CanonicalAlias = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "world_readable":
			out.WorldReadable = bool(in.Bool())
		case "topic":
			out.Topic = string(in.String())
		case "num_joined_members":
			out.NumJoinedMembers = int(in.Int())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "room_id":
			out.RoomID = string(in.String())
		case "guest_can_join":
			out.GuestCanJoin = bool(in.Bool())
		case "aliases":
			if in.IsNull() {
				in.Skip()
				out.Aliases = nil
			} else {
				in.Delim('[')
				if out.Aliases == nil {
					if !in.IsDelim(']') {
						out.Aliases = make([]string, 0, 4)
					} else {
						out.Aliases = []string{}
					}
				} else {
					out.Aliases = (out.Aliases)[:0]
				}
				for !in.IsDelim(']') {
					var v42 string
					v42 = string(in.String())
					out.Aliases = append(out.Aliases, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix12(out *jwriter.Writer, in PublicRoom) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"canonical_alias\":"
		out.RawString(prefix[1:])
		out.String(string(in.CanonicalAlias))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"world_readable\":"
		out.RawString(prefix)
		out.Bool(bool(in.WorldReadable))
	}
	{
		const prefix string = ",\"topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"num_joined_members\":"
		out.RawString(prefix)
		out.Int(int(in.NumJoinedMembers))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	{
		const prefix string = ",\"room_id\":"
		out.RawString(prefix)
		out.String(string(in.RoomID))
	}
	{
		const prefix string = ",\"guest_can_join\":"
		out.RawString(prefix)
		out.Bool(bool(in.GuestCanJoin))
	}
	{
		const prefix string = ",\"aliases\":"
		out.RawString(prefix)
		if in.Aliases == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.Aliases {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix13(in *jlexer.Lexer, out *RespMessages) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "start":
			out.Start = string(in.String())
		case "chunk":
			if in.IsNull() {
				in.Skip()
				out.Chunk = nil
			} else {
				in.Delim('[')
				if out.Chunk == nil {
					if !in.IsDelim(']') {
						out.Chunk = make([]Event, 0, 0)
					} else {
						out.Chunk = []Event{}
					}
				} else {
					out.Chunk = (out.Chunk)[:0]
				}
				for !in.IsDelim(']') {
					var v45 Event
					easyjson559270aeDecodeGithubComMatrixOrgGomatrix8(in, &v45)
					out.Chunk = append(out.Chunk, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "end":
			out.End = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix13(out *jwriter.Writer, in RespMessages) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix[1:])
		out.String(string(in.Start))
	}
	{
		const prefix string = ",\"chunk\":"
		out.RawString(prefix)
		if in.Chunk == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v46, v47 := range in.Chunk {
				if v46 > 0 {
					out.RawByte(',')
				}
				easyjson559270aeEncodeGithubComMatrixOrgGomatrix8(out, v47)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"end\":"
		out.RawString(prefix)
		out.String(string(in.End))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespMessages) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespMessages) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespMessages) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespMessages) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix13(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix14(in *jlexer.Lexer, out *RespMediaUpload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content_uri":
			out.ContentURI = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix14(out *jwriter.Writer, in RespMediaUpload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"content_uri\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContentURI))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespMediaUpload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespMediaUpload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespMediaUpload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespMediaUpload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix14(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix15(in *jlexer.Lexer, out *RespLogoutAll) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix15(out *jwriter.Writer, in RespLogoutAll) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespLogoutAll) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespLogoutAll) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespLogoutAll) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespLogoutAll) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix15(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix16(in *jlexer.Lexer, out *RespLogout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix16(out *jwriter.Writer, in RespLogout) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespLogout) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespLogout) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespLogout) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespLogout) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix16(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix17(in *jlexer.Lexer, out *RespLogin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.AccessToken = string(in.String())
		case "device_id":
			out.DeviceID = string(in.String())
		case "home_server":
			out.HomeServer = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "well_known":
			(out.WellKnown).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix17(out *jwriter.Writer, in RespLogin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"device_id\":"
		out.RawString(prefix)
		out.String(string(in.DeviceID))
	}
	{
		const prefix string = ",\"home_server\":"
		out.RawString(prefix)
		out.String(string(in.HomeServer))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"well_known\":"
		out.RawString(prefix)
		(in.WellKnown).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespLogin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespLogin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespLogin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespLogin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix17(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix18(in *jlexer.Lexer, out *RespLeaveRoom) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix18(out *jwriter.Writer, in RespLeaveRoom) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespLeaveRoom) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespLeaveRoom) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespLeaveRoom) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespLeaveRoom) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix18(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix19(in *jlexer.Lexer, out *RespKickUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix19(out *jwriter.Writer, in RespKickUser) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespKickUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespKickUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespKickUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespKickUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix19(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix20(in *jlexer.Lexer, out *RespJoinedRooms) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "joined_rooms":
			if in.IsNull() {
				in.Skip()
				out.JoinedRooms = nil
			} else {
				in.Delim('[')
				if out.JoinedRooms == nil {
					if !in.IsDelim(']') {
						out.JoinedRooms = make([]string, 0, 4)
					} else {
						out.JoinedRooms = []string{}
					}
				} else {
					out.JoinedRooms = (out.JoinedRooms)[:0]
				}
				for !in.IsDelim(']') {
					var v48 string
					v48 = string(in.String())
					out.JoinedRooms = append(out.JoinedRooms, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix20(out *jwriter.Writer, in RespJoinedRooms) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"joined_rooms\":"
		out.RawString(prefix[1:])
		if in.JoinedRooms == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v49, v50 := range in.JoinedRooms {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.String(string(v50))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespJoinedRooms) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespJoinedRooms) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespJoinedRooms) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespJoinedRooms) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix20(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix21(in *jlexer.Lexer, out *RespJoinedMembers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "joined":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Joined = make(map[string]struct {
					DisplayName *string `json:"display_name"`
					AvatarURL   *string `json:"avatar_url"`
				})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v51 struct {
						DisplayName *string `json:"display_name"`
						AvatarURL   *string `json:"avatar_url"`
					}
					easyjson559270aeDecode8(in, &v51)
					(out.Joined)[key] = v51
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix21(out *jwriter.Writer, in RespJoinedMembers) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"joined\":"
		out.RawString(prefix[1:])
		if in.Joined == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v52First := true
			for v52Name, v52Value := range in.Joined {
				if v52First {
					v52First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v52Name))
				out.RawByte(':')
				easyjson559270aeEncode8(out, v52Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespJoinedMembers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespJoinedMembers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespJoinedMembers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespJoinedMembers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix21(l, v)
}
func easyjson559270aeDecode8(in *jlexer.Lexer, out *struct {
	DisplayName *string `json:"display_name"`
	AvatarURL   *string `json:"avatar_url"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "display_name":
			if in.IsNull() {
				in.Skip()
				out.DisplayName = nil
			} else {
				if out.DisplayName == nil {
					out.DisplayName = new(string)
				}
				*out.DisplayName = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.AvatarURL = nil
			} else {
				if out.AvatarURL == nil {
					out.AvatarURL = new(string)
				}
				*out.AvatarURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode8(out *jwriter.Writer, in struct {
	DisplayName *string `json:"display_name"`
	AvatarURL   *string `json:"avatar_url"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"display_name\":"
		out.RawString(prefix[1:])
		if in.DisplayName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DisplayName))
		}
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		if in.AvatarURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarURL))
		}
	}
	out.RawByte('}')
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix22(in *jlexer.Lexer, out *RespJoinRoom) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "room_id":
			out.RoomID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix22(out *jwriter.Writer, in RespJoinRoom) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"room_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.RoomID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespJoinRoom) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespJoinRoom) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespJoinRoom) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespJoinRoom) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix22(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix23(in *jlexer.Lexer, out *RespInviteUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix23(out *jwriter.Writer, in RespInviteUser) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespInviteUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespInviteUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespInviteUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespInviteUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix23(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix24(in *jlexer.Lexer, out *RespForgetRoom) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix24(out *jwriter.Writer, in RespForgetRoom) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespForgetRoom) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespForgetRoom) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespForgetRoom) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespForgetRoom) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix24(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix25(in *jlexer.Lexer, out *RespError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "errcode":
			out.ErrCode = string(in.String())
		case "error":
			out.Err = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix25(out *jwriter.Writer, in RespError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"errcode\":"
		out.RawString(prefix[1:])
		out.String(string(in.ErrCode))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Err))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix25(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix26(in *jlexer.Lexer, out *RespCreateRoom) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "room_id":
			out.RoomID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix26(out *jwriter.Writer, in RespCreateRoom) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"room_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.RoomID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespCreateRoom) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespCreateRoom) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespCreateRoom) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespCreateRoom) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix26(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix27(in *jlexer.Lexer, out *RespCreateFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filter_id":
			out.FilterID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix27(out *jwriter.Writer, in RespCreateFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filter_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.FilterID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespCreateFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespCreateFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespCreateFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespCreateFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix27(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix28(in *jlexer.Lexer, out *RespBanUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix28(out *jwriter.Writer, in RespBanUser) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespBanUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespBanUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespBanUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespBanUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix28(l, v)
}
func easyjson559270aeDecodeGithubComMatrixOrgGomatrix29(in *jlexer.Lexer, out *DiscoveryInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "m.homeserver":
			easyjson559270aeDecode9(in, &out.Homeserver)
		case "m.identitiy_server":
			easyjson559270aeDecode9(in, &out.IdentityServer)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComMatrixOrgGomatrix29(out *jwriter.Writer, in DiscoveryInformation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"m.homeserver\":"
		out.RawString(prefix[1:])
		easyjson559270aeEncode9(out, in.Homeserver)
	}
	{
		const prefix string = ",\"m.identitiy_server\":"
		out.RawString(prefix)
		easyjson559270aeEncode9(out, in.IdentityServer)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DiscoveryInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DiscoveryInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComMatrixOrgGomatrix29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DiscoveryInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DiscoveryInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComMatrixOrgGomatrix29(l, v)
}
func easyjson559270aeDecode9(in *jlexer.Lexer, out *struct {
	BaseURL string `json:"base_url"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "base_url":
			out.BaseURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode9(out *jwriter.Writer, in struct {
	BaseURL string `json:"base_url"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"base_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.BaseURL))
	}
	out.RawByte('}')
}
